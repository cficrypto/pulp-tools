#!/usr/bin/env python3

import argparse
import plptree
import json_tools as js
import os
import os.path


parser = argparse.ArgumentParser(description='Generate a user configuration')

parser.add_argument(
    "--output", dest="output", default=None,
    help="Specify output configuration"
)

parser.add_argument(
    "--input", dest="input", default=None,
    help="Specify input configuration"
)

parser.add_argument(
    "--config", dest="configs", action="append", default=[],
    help="Specify additional configuration item"
)

args = parser.parse_args()

tree = plptree.get_configs(config_string=args.input, no_args=True)[0]

config = js.import_config(tree.get_dict())

for opt_list in args.configs:
    for opt in opt_list.split(':'):
        key, value = opt.split('=')
        if args.input.find('template=') != -1 and (key == 'camera' or key == 'microphone'):
            continue

        # In case the path is not absolute and does not contain *
        # add it implicitly to let the user specify a property
        # without having to put **/ at the beginning
        if key[0] != '*' and key[0] != '/':
            key = '**/' + key

        if key[0] == '/':
            key = key[1:]

        if key.find('/') != -1:
            root, prop = key.rsplit('/', 1)
            if config.get(root) is not None:
                config.get(root).set(prop, value)
            else:
                config.set(key, value)
        else:
            config.set(key, value)

try:
    os.makedirs(os.path.dirname(args.output))
except:
    pass

with open(args.output, 'w') as file:
    file.write(config.dump_to_string())
